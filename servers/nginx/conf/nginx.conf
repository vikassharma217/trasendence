events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Upstream configuration for backend and frontend
    upstream frontend {
        server frontend:3000;
    }

    upstream backend {
        server backend:8080;
    }

    # HTTPS server block for localhost
    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name localhost;

        ssl_certificate /etc/nginx/ssl/localhost.crt;
        ssl_certificate_key /etc/nginx/ssl/localhost.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Proxy requests to the backend
        location /api/ {
            proxy_pass http://backend;
            proxy_ssl_verify off;   
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";
        }
        location /api/ws {
            proxy_pass http://backend; # Use the upstream backend defined above
            proxy_ssl_verify off; # Disable SSL verification for backend
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        location = /favicon.ico {
            return 204; # Return a "No Content" response
        }


        # Proxy all other requests to the frontend
        location / {
            proxy_pass http://frontend;
            proxy_ssl_verify off; # Disable SSL verification for frontend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    # HTTP to HTTPS redirection for localhost
    server {
        listen 80;
        server_name localhost;

        return 301 https://$host$request_uri;
    }
}